input {
    http_poller {
        urls => {
            fla => {
                method => get
                user => "${JIRA_USER}"
                password => "${JIRA_PASSWORD}"
                url => "${JIRA_BASE_PATH}/rest/api/2/search?jql=${JIRA_JQL}&maxResults=${JIRA_MAX_RESULT:10}"
                headers => {
                    Accept => "application/json"
                }
            }
        }
    request_timeout => 5000
    schedule => { every =>"60s"}  
    codec => "json"
    }
}

filter {
    
    # split issues
    split { 
        field => "issues"
    }

    # rename issues
    mutate {
        rename => { "issues" => "issue" }
    }

    # get project lowercase
    mutate {
        copy => { "[issue][fields][project][key]" => "project" }
    }

    mutate {
        lowercase => [ "project" ]
    }

    if [issue][fields][customfield_10542] {
        mutate {
            copy => { "[issue][fields][customfield_10542]" => "[issue][storypoints]" }
        }
    }

    # resolve epic name
    if [issue][fields][customfield_10546] and [issue][fields][customfield_10546] =~ /.+/ {

        http {
            url => "${JIRA_BASE_PATH}/rest/api/2/search?jql=issue=%{[issue][fields][customfield_10546]}"
            headers => {
                    "Accept" => "application/json"
                }
            user => "${JIRA_USER}"
            password => "${JIRA_PASSWORD}"
            body_format => "json"
            target_body => "[@metadata][epic]"
            
        }

        if [@metadata][epic][issues] {

            mutate {
                copy => { "[@metadata][epic][issues][0]" => "epic" }
            }
        }

        mutate { remove_field => [ "headers" ] }


    }

    mutate { remove_field => [ "startAt", "total", "expand", "maxResults" ] }

    if [issue][fields][labels] {
        ruby {
            code => "
                event.get('[issue][fields][labels]').each do |item|
                    if item.start_with?('R-')
                        event.set('role', item[2..-1])
                    end
                end
                "
        }
    }

}

output {

    # stdout { codec => rubydebug }
    
    elasticsearch { 
        hosts => ["${ES_HOST}:${ES_PORT}"]
        index => "jira-%{project}"
        document_id => "%{[issue][key]}"
    }

}
                